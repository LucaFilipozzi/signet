#!/bin/sh

. ./signet.conf

remove_sigs () {
	printf "minimize\nsave\ny\n" | gpg --command-fd 0 --homedir $SIGNET_TEMP_DIR --no-default-keyring --keyring $TEMPORARY_KEYRING --edit-key $1
}

sign_uid () {
	clear

	if [ -n "$SIGNING_POLICY_URL" ]; then
		gpgopts="--sig-policy-url $SIGNING_POLICY_URL "
	fi

	if [ "$USE_CERT_LEVELS" = "y" ]; then
		gpgopts="$gpgopts --ask-cert-level"
	fi

	printf "Invoking GPG in order to sign key %s UID %s (%s) with key %s\n" "$2" "$3" "$4" "$1"
	#GPG does its own user sanity check
	gpg --homedir $SIGNET_TEMP_DIR --no-default-keyring --keyring $TEMPORARY_KEYRING --secret-keyring $PRIVATE_SIGNER_KEYRING --keyring $PUBLIC_SIGNER_KEYRING --default-key $1 $gpgopts --edit-key $2 uid $3 sign save < /dev/tty

	printf "GPG exit code %s\n" "$?"
	gpg --homedir $SIGNET_TEMP_DIR --no-default-keyring --keyring $TEMPORARY_KEYRING --no-emit-version --export --armor $2 > $SIGNET_OUTPUT_DIR/$2_UID$3_by_$1.sig
	sleep 3
	remove_sigs $2
}

sign_key () {
	printf "Now processing key %s (Signerkey %s)\n\n" "$2" "$1"
	printf "Minimizing key...\n"
	remove_sigs $2

	#TODO: Show fingerprint and ask for match

	current_uid=1

	printf "Now processing UIDs\n"
	
	gpg --homedir $SIGNET_TEMP_DIR --no-default-keyring --keyring $TEMPORARY_KEYRING --with-colons --list-keys $2 | grep ^[up][iu][db]: | while read uid; do
		uid_name=$(echo $uid | cut -d : -f 10)
		uid_status=$(echo $uid | cut -d : -f 2)
		sign_uid $1 $2 $current_uid "$uid_name" "$uid_status"
		current_uid=$(expr $current_uid + 1)
	done
}

load_key_file (){
	printf "Enter path to signee public key: "
	read key_file

	gpg --homedir $SIGNET_TEMP_DIR --no-default-keyring --keyring $TEMPORARY_KEYRING --import-options import-minimal --import $key_file
	if [ "$?" = "0" ]; then
		printf "Signee key seems to have been imported successfully\n"
	else
		printf "GPG reported an error importing the key. Abort? (y/n): "
		read action
		if [ "$action" = "y" ]; then
			exit 5
		fi
	fi

	#Get imported key ID
	signee_fp=$(gpg --homedir $SIGNET_TEMP_DIR --no-default-keyring --keyring $TEMPORARY_KEYRING --list-keys --with-colons | grep pub | cut -d : -f 5)
	printf "Detected imported fingerprint %s\n" "$signee_fp"

	sign_key $1 $signee_fp
}

load_key_net (){
	printf "Enter signee key fingerprint: "
	read signee_fp

	#FIXME: import-options seems to not work with recv-keys
	gpg --homedir $SIGNET_TEMP_DIR --no-default-keyring --keyring $TEMPORARY_KEYRING --import-options import-minimal --keyserver $KEY_SERVER --recv-keys $signee_fp
	if [ "$?" = "0" ]; then
		printf "Signee key seems to have been imported successfully.\n"	
	else
		printf "GPG reported an error fetching/importing the key. Abort? (y/n): "
		read action
		if [ "$action" = "y" ]; then
			exit 5
		fi
	fi

	signee_fp=$(gpg --homedir $SIGNET_TEMP_DIR --no-default-keyring --keyring $TEMPORARY_KEYRING --list-keys --with-colons | grep pub | cut -d : -f 5)
	printf "Detected imported fingerprint %s\n" "$signee_fp"

	sign_key $1 $signee_fp
}

load_keyring () {
	#TODO: Import keyring
	printf "Importing entire keyring\n"
}
printf "Signet v0.1 - Welcome\n"

printf "Setting up environment...\n"
chmod 700 $SIGNET_TEMP_DIR
rm $SIGNET_TEMP_DIR/* > /dev/null
#gpg --no-default-keyring --keyring $PRIVATE_SIGNER_KEYRING --export-ownertrust | gpg --homedir $SIGNET_TEMP_DIR --no-default-keyring --keyring $PRIVATE_SIGNER_KEYRING --import-ownertrust

printf "\nAvailable signing keys:\n"
gpg --no-default-keyring --secret-keyring $PRIVATE_SIGNER_KEYRING --keyring $PUBLIC_SIGNER_KEYRING --list-secret-keys | grep "^sec[^#]" 

printf "\nEnter ID of key to use for signing: "
read SIGNERKEY

printf "\nSigner key details:\n"
gpg --no-default-keyring --secret-keyring $PRIVATE_SIGNER_KEYRING --keyring $PUBLIC_SIGNER_KEYRING --list-secret-keys $SIGNERKEY


if [ "$?" = "0" ]; then
	printf "Signer key seems ok\n"
else
	printf "GPG reported a failure while listing the key. Aborting\n"
	exit 2
fi

printf "Select signee source:\n\t(k)eyring\n\t(n)et\n\t(f)ile\n"
read mode

case $mode in
	k) load_keyring $SIGNERKEY;;
	n) load_key_net $SIGNERKEY;;
	f) load_key_file $SIGNERKEY;;
	*) printf "Could not determine signee source. Aborting.\n";
	   exit 3;;
esac


